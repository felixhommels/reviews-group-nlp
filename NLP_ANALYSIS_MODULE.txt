# --- NLP Analysis Module Documentation ---

This document outlines the architecture, objectives, and usage of the upgraded NLP analysis module for review data. This module is the core of the project's review analytics pipeline and is designed for extensibility, multilingual support, and modularity.

## 1. Objective

The main goal of this module is to provide a robust, extensible, and language-aware framework for analyzing review text data. It supports sentiment analysis, emotion detection, keyword extraction, and star rating prediction, and is designed to work seamlessly with the new multi-language preprocessing pipeline.

## 2. Key Architectural Changes

- **Modular Design:**
    - The analysis logic is split into dedicated modules: `sentiment_analysis.py`, `emotion_analysis.py`, `keyword_extraction.py`, and `star_rating_predictor.py`.
    - The main orchestrator is `nlp_analysis.py`, which coordinates these components via the `ReviewAnalyzer` class.

- **Configurable & Extensible:**
    - Uses a `ConfigManager` to load language-specific and global configuration for each analysis component.
    - Supports easy addition of new languages, models, or analysis features.

- **Dependency Management:**
    - All external dependencies are managed via a `dependency_manager` utility, ensuring robust imports and clear error messages if a dependency is missing.

- **Multilingual Support:**
    - The module can analyze reviews in multiple languages, leveraging language-specific models and configurations.
    - Emotion and sentiment analyzers are selected based on the review's language.

- **Integration with Preprocessing:**
    - Designed to work directly with the output of the new spaCy-based preprocessing pipeline, using the `processed_text` column.

## 3. How the Pipeline Works

1. **Initialization:**
    - The `ReviewAnalyzer` is instantiated with a target language (default: English).
    - Loads all relevant configuration and initializes the appropriate analysis components for the language.

2. **Analysis:**
    - For each review, the following steps are performed:
        - **Sentiment Analysis:** Determines the sentiment label and polarity.
        - **Keyword Extraction:** Extracts top keywords using TF-IDF or similar methods.
        - **Emotion Detection:** Classifies the primary emotion(s) present in the text.
        - **Star Rating Prediction:** Predicts a likely star rating based on sentiment and other features.
    - Results are aggregated into a DataFrame with new columns for each analysis output.

3. **Batch Processing:**
    - The `analyze_reviews` method processes an entire DataFrame of reviews, adding columns for sentiment, keywords, emotions, and predicted stars.

## 4. Instructions for Setup and Use

1. **Install Dependencies:**
    - Ensure all dependencies are installed:
    ```
    pip install -r requirements.txt
    ```

2. **Preprocess Data:**
    - Run the preprocessing pipeline (see `PREPROCESSING_MODULE.txt`) to generate a DataFrame with a `processed_text` column.

3. **Run Analysis:**
    - Use the `ReviewAnalyzer` class in your scripts or notebooks:
    ```python
    from src.analysis.nlp_analysis import ReviewAnalyzer
    analyzer = ReviewAnalyzer(language='es')  # or 'en', 'fr', etc.
    results = analyzer.analyze_reviews(processed_df, text_column='processed_text')
    ```

4. **Visualize Results:**
    - Use the provided `visualize_results.py` script to generate plots and word clouds from the analysis output.

5. **Testing:**
    - Run the test suite with:
    ```
    python run_tests.py
    ```

## 5. Summary of New & Changed Files

- **Kept/Modified:**
    - `src/analysis/nlp_analysis.py` (Main orchestrator)
    - `src/analysis/sentiment_analysis.py`, `emotion_analysis.py`, `keyword_extraction.py`, `star_rating_predictor.py` (Modular analyzers)
    - `src/config/` (Configuration management)
    - `src/utils/dependencies.py` (Dependency management)
    - `requirements.txt` (Updated)
    - `visualize_results.py` (Updated for new output)

- **New:**
    - `src/analysis/archive/` (Legacy and reference scripts)

- **Deleted/Obsolete:**
    - Old monolithic analysis scripts (now in `archive/`)

## 6. Notes

- The current production code is in `src/analysis/nlp_analysis.py`.
- For legacy or experimental code, see `src/analysis/archive/`.
- This modular architecture makes it easy to swap out or upgrade individual analysis components as new models or requirements emerge.

---

This new NLP analysis module provides a scalable, maintainable, and extensible foundation for advanced review analytics across multiple languages.
